---
# Inspired by
# https://github.com/ansible-collections/community.hashi_vault/blob/11688707a08cb17eb609f82092c0b711953c2ba2/.github/workflows/ansible-test.yml
name: CI
on:
  push:
    branches:
      - master
    paths:
      - '**'
      # handled in release workflow
      - '!RELEASE'
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        description: "For pull request, use 'github.event.pull_request.head.sha'"
        default: ${{ github.ref }}
        required: false
        type: string

env:
  NAMESPACE: unbelievable
  COLLECTION_NAME: hpe

jobs:
  sanity:
    name: Sanity (Ansible ${{ matrix.ansible }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          - ubuntu-latest
        test_container:
          - default
        ansible:
          - stable-2.9
          - stable-2.10
          - stable-2.11
          - stable-2.12
          - devel
    steps:
      # ansible-test requires the collection to be in a directory in the form
      # .../ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}/
      - name: Initialize env vars
        uses: briantist/ezenv@v1
        with:
          env: |
            COLLECTION_PATH=ansible_collections/${NAMESPACE}/${COLLECTION_NAME}
            TEST_INVOCATION="sanity --docker ${{ matrix.test_container }} --exclude dev_tools/**.py -v --color --coverage"

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.COLLECTION_PATH }}
          ref: ${{ inputs.ref }}

      - name: Link to .github # easier access to local actions
        run: ln -s "${COLLECTION_PATH}/.github" .github

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test sanity" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      # Install the head of the given branch (devel, stable-2.10)
      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      - name: Pull Ansible test images
        timeout-minutes: 5
        continue-on-error: true
        uses: ./.github/actions/pull-ansible-test-images
        with:
          working-directory: ${{ env.COLLECTION_PATH }}
          ansible-test-invocation: ${{ env.TEST_INVOCATION }}

      # run ansible-test sanity inside of Docker.
      # The docker container has all the pinned dependencies that are required
      # and all python versions ansible supports.
      - name: Run sanity tests
        run: ansible-test ${{ env.TEST_INVOCATION }}
        working-directory: ${{ env.COLLECTION_PATH }}

      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version --group-by environment --group-by target
        working-directory: ${{ env.COLLECTION_PATH }}

      - name: Upload ${{ github.job }} coverage reports
        uses: actions/upload-artifact@v2
        with:
          name: coverage=${{ github.job }}=ansible_${{ matrix.ansible }}=data
          path: ${{ env.COLLECTION_PATH }}/tests/output/reports/
          if-no-files-found: ignore
          retention-days: 1

  units:
    name: Units (Ansible ${{ matrix.ansible }})
    runs-on: ${{ matrix.runner }}
    strategy:
      # As soon as the first unit test fails, cancel the others to free up the CI queue
      fail-fast: true
      matrix:
        runner:
          - ubuntu-latest
        test_container:
          - default
        ansible:
          - stable-2.9
          - stable-2.10
          - stable-2.11
          - stable-2.12
          - devel
    steps:
      - name: Initialize env vars
        uses: briantist/ezenv@v1
        with:
          env: |
            COLLECTION_PATH=ansible_collections/${NAMESPACE}/${COLLECTION_NAME}
            TEST_INVOCATION="units --color --docker ${{ matrix.test_container }} --coverage"

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.COLLECTION_PATH }}
          ref: ${{ inputs.ref }}

      - name: Link to .github # easier access to local actions
        run: ln -s "${COLLECTION_PATH}/.github" .github

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          # it is just required to run that once as "ansible-test units" in the docker image
          # will run on all python versions it supports.
          python-version: 3.8

      - name: Install ansible-base (${{ matrix.ansible }})
        run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      - name: Pull Ansible test images
        timeout-minutes: 5
        continue-on-error: true
        uses: ./.github/actions/pull-ansible-test-images
        with:
          working-directory: ${{ env.COLLECTION_PATH }}
          ansible-test-invocation: ${{ env.TEST_INVOCATION }}

      # Run the unit tests
      - name: Run unit test
        run: ansible-test ${{ env.TEST_INVOCATION }}
        working-directory: ${{ env.COLLECTION_PATH }}

      # ansible-test coverage will fail if directory does not exist
      - name: Create tests/output/coverage if it does not exist
        run: mkdir -p tests/output/coverage
        working-directory: ${{ env.COLLECTION_PATH }}

      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version --group-by environment --group-by target
        working-directory: ${{ env.COLLECTION_PATH }}

      - name: Upload ${{ github.job }} coverage reports
        uses: actions/upload-artifact@v2
        with:
          name: coverage=${{ github.job }}=ansible_${{ matrix.ansible }}=data
          path: ${{ env.COLLECTION_PATH }}/tests/output/reports/
          if-no-files-found: ignore
          retention-days: 1

  other-tests:
    name: Build, check version and run pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Initialize env vars
        uses: briantist/ezenv@v1
        with:
          env: |
            COLLECTION_PATH=ansible_collections/${NAMESPACE}/${COLLECTION_NAME}
            VENV_HASH_FILES=${COLLECTION_PATH}/requirements.txt
            PRE_COMMIT_HASH_FILES=${COLLECTION_PATH}/.pre-commit-config.yaml

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ${{ env.COLLECTION_PATH }}
          ref: ${{ inputs.ref }}
          fetch-depth: 2

      - name: Link to .github # easier access to local actions
        run: ln -s "${COLLECTION_PATH}/.github" .github

      - name: Cache .venv modules
        uses: actions/cache@v2
        with:
          path: ${{ env.COLLECTION_PATH }}/.venv
          key: ${{ hashFiles(env.VENV_HASH_FILES) }}

      - name: Create venv
        working-directory: ${{ env.COLLECTION_PATH }}
        run: make venv

      - name: Run make build
        working-directory: ${{ env.COLLECTION_PATH }}
        run: |
          source .venv/bin/activate
          make build

      - name: Check VERSION is consistent
        uses: ./.github/actions/check-version
        with:
          working-directory: ${{ env.COLLECTION_PATH }}

      - name: Check if RELEASE file changed
        id: changed-files
        uses: tj-actions/changed-files@v11.5
        with:
          path: ${{ env.COLLECTION_PATH }}
          files: |
            RELEASE

      - name: Ensure no git tag name like RELEASE exists
        working-directory: ${{ env.COLLECTION_PATH }}
        if: steps.changed-files.outputs.any_changed  == 'true'
        run: |
          git fetch --tags
          TAG=$(git tag -l v${VERSION})
          test -z "${TAG}"

      - name: Generate python version hash
        working-directory: ${{ env.COLLECTION_PATH }}
        run: |
          source .venv/bin/activate
          echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Cache pre-commit
        uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles(env.PRE_COMMIT_HASH_FILES) }}

      - name: Run pre-commit on all files
        working-directory: ${{ env.COLLECTION_PATH }}
        run: |
          source .venv/bin/activate
          SKIP=no-commit-to-branch pre-commit run --all-files
